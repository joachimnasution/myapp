{"version":3,"sources":["components/AlertDismissable.js","pages/About.js","components/LoadButton.js","model/classes.js","config.js","pages/Classify.js","pages/NotFound.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["AlertDismissable","this","props","show","react_default","a","createElement","Alert","variant","onClose","dismissible","title","dangerouslySetInnerHTML","__html","message","Component","Home","className","LoadButton","_ref","isLoading","text","loadingText","_ref$className","_ref$disabled","disabled","Object","objectWithoutProperties","Button","assign","concat","Spinner","as","animation","size","role","aria-hidden","MODEL_CLASSES","0","1","src_config","API_ENDPOINT","MODEL_PATH","IMAGE_SIZE","CANVAS_SIZE","TOPK_PREDICTIONS","INDEXEDDB_KEY","Classify","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","initWebcam","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","tf","webcam","refs","resizeWidth","resizeHeight","facingMode","sent","t0","noWebcam","style","display","stop","startWebcam","_callee2","_context2","start","stopWebcam","_callee3","_context3","getModelInfo","_callee5","_context5","fetch","config","method","then","_ref5","_callee4","response","_context4","json","data","modelLastUpdated","last_updated","catch","err","console","log","_x","apply","arguments","updateModel","_callee6","_context6","setState","isDownloadingModel","model","save","modelUpdateAvailable","showModelUpdateAlert","showModelUpdateSuccess","classifyLocalImage","_callee7","croppedCanvas","image","imageData","resizedImage","logits","probabilities","preds","context","ratioX","ratioY","ratio","_context7","isClassifying","cropper","getCroppedCanvas","fromPixels","toFloat","processImage","resizeBilinear","predict","getTopKClasses","predictions","photoSettingsOpen","state","canvas","getContext","width","height","Math","min","clearRect","drawImage","dispose","classifyWebcamImage","_callee8","imageCapture","resized","tensorData","_context8","capture","div","toPixels","_ref9","_callee9","_context9","abrupt","expandDims","sub","_x2","_ref10","_callee10","values","topK","valuesAndIndices","i","topkValues","topkIndices","_i","topClassesAndProbs","_i2","_context10","length","push","value","index","sort","b","Float32Array","Int32Array","probability","toFixed","_x3","_x4","handlePanelClick","event","handleFileChange","target","files","file","URL","createObjectURL","filename","name","handleTabSelect","activeKey","modelLoaded","isModelLoading","window","openDB","db","transaction","objectStore","get","item","dateSaved","Date","modelArtifactsInfo","getTime","warn","_context11","t1","_this2","e","_this3","react","onClick","aria-controls","aria-expanded","index_esm","Collapse","in","id","Container","modelType","Tabs","defaultActiveKey","onSelect","Tab","eventKey","ref","autoPlay","playsInline","muted","Form","Group","controlId","Label","Control","onChange","type","accept","react_cropper_default","src","guides","aspectRatio","viewMode","ListGroup","map","category","Item","key","pages_NotFound","href","Routes","childProps","react_router","path","exact","component","About","NotFound","App","dismissUpdateAlert","showUpdateAlert","reloadMsg","Navbar","collapseOnSelect","expand","Brand","Toggle","Nav","react_router_dom","to","updateAvailable","paddingTop","components_AlertDismissable","withRouter","isLocalhost","Boolean","location","hostname","match","register","navigator","process","origin","addEventListener","swUrl","contentType","headers","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","checkValidServiceWorker","newerSwAvailable","sw","onUpdate","waiting","active","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","error","Index","contentCached","handleUpdate","waitingServiceWorker","postMessage","src_App_0","ReactDOM","render","src_Index","document","getElementById"],"mappings":"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","file":"static/js/main.ec6144af.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\n/**\r\n * Class to handle the rendering of a dismissiable alert to use for things like errors.\r\n * @extends React.Component\r\n */\r\nclass AlertDismissable extends Component {\r\n\r\n  render() {\r\n    if (this.props.show) {\r\n      return (\r\n        <Alert variant={this.props.variant || 'danger'} onClose={this.props.onClose} dismissible>\r\n          { this.props.title && <h5><strong>{this.props.title}</strong></h5> }\r\n          <div dangerouslySetInnerHTML={{ __html: this.props.message }} />\r\n        </Alert>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default AlertDismissable;\r\n","import React, { Component } from 'react';\r\nimport './About.css';\r\n\r\n/**\r\n * Class to handle the rendering of the Home page.\r\n * @extends React.Component\r\n */\r\nexport default class Home extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"About container\">\r\n        <h1>About</h1>\r\n        <p>\r\n          This is a TensorFlow.js web application where users can classify images selected locally\r\n          or taken with their device's camera. The app uses TensorFlow.js and a pre-trained model\r\n          converted to the TensorFlow.js format to provide the inference capabilities.\r\n          This model is saved locally in the browser using IndexedDB. A service worker is also used\r\n          to provide offline capabilities.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Button, Spinner } from 'react-bootstrap';\r\n\r\n/**\r\n * This produces a button that will have a loading animation while the isLoading property is true.\r\n */\r\nexport default ({\r\n  isLoading,\r\n  text,\r\n  loadingText,\r\n  className = '',\r\n  disabled = false,\r\n  ...props\r\n}) =>\r\n  <Button\r\n    className={`LoadButton ${className}`}\r\n    disabled={disabled || isLoading}\r\n    {...props}\r\n  >\r\n    {isLoading && <Spinner\r\n      as=\"span\"\r\n      animation=\"border\"\r\n      size=\"sm\"\r\n      role=\"status\"\r\n      aria-hidden=\"true\"\r\n    />}{' '}\r\n    {isLoading ? loadingText : text}\r\n  </Button>;\r\n","/* eslint-disable */\r\n// Theses classes should correspond to the softmax output of your model.\r\n\r\nexport const MODEL_CLASSES = {\r\n  0: 'Hijab',\r\n  1: 'Non Hijab',\r\n};\r\n","export default {\r\n  API_ENDPOINT: 'http://localhost:5000/api',\r\n  // API_ENDPOINT: 'https://[YOUR-ROUTE].mybluemix.net/api'\r\n};\r\n","import React, { Component, Fragment } from 'react';\r\nimport {\r\n  Alert, Button, Collapse, Container, Form, Spinner, ListGroup, Tabs, Tab\r\n} from 'react-bootstrap';\r\nimport { FaCamera, FaChevronDown, FaChevronRight } from 'react-icons/fa';\r\nimport { openDB } from 'idb';\r\nimport Cropper  from 'react-cropper';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport LoadButton from '../components/LoadButton';\r\nimport { MODEL_CLASSES } from '../model/classes';\r\nimport config from '../config';\r\nimport './Classify.css';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\n\r\nconst MODEL_PATH = '/model/model.json';\r\nconst IMAGE_SIZE = 224;\r\nconst CANVAS_SIZE = 224;\r\nconst TOPK_PREDICTIONS = 1;\r\n\r\nconst INDEXEDDB_DB = 'tensorflowjs';\r\nconst INDEXEDDB_STORE = 'model_info_store';\r\nconst INDEXEDDB_KEY = 'web-model';\r\n\r\n/**\r\n * Class to handle the rendering of the Classify page.\r\n * @extends React.Component\r\n */\r\nexport default class Classify extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.webcam = null;\r\n    this.model = null;\r\n    this.modelLastUpdated = null;\r\n\r\n    this.state = {\r\n      modelLoaded: false,\r\n      filename: '',\r\n      isModelLoading: false,\r\n      isClassifying: false,\r\n      predictions: [],\r\n      photoSettingsOpen: true,\r\n      modelUpdateAvailable: false,\r\n      showModelUpdateAlert: false,\r\n      showModelUpdateSuccess: false,\r\n      isDownloadingModel: false\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (('indexedDB' in window)) {\r\n      try {\r\n        this.model = await tf.loadLayersModel('indexeddb://' + INDEXEDDB_KEY);\r\n\r\n        // Safe to assume tensorflowjs database and related object store exists.\r\n        // Get the date when the model was saved.\r\n        try {\r\n          const db = await openDB(INDEXEDDB_DB, 1, );\r\n          const item = await db.transaction(INDEXEDDB_STORE)\r\n                               .objectStore(INDEXEDDB_STORE)\r\n                               .get(INDEXEDDB_KEY);\r\n          const dateSaved = new Date(item.modelArtifactsInfo.dateSaved);\r\n          await this.getModelInfo();\r\n          console.log(this.modelLastUpdated);\r\n          if (!this.modelLastUpdated  || dateSaved >= new Date(this.modelLastUpdated).getTime()) {\r\n            console.log('Using saved model');\r\n          }\r\n          else {\r\n            this.setState({\r\n              modelUpdateAvailable: true,\r\n              showModelUpdateAlert: true,\r\n            });\r\n          }\r\n\r\n        }\r\n        catch (error) {\r\n          console.warn(error);\r\n          console.warn('Could not retrieve when model was saved.');\r\n        }\r\n\r\n      }\r\n      // If error here, assume that the object store doesn't exist and the model currently isn't\r\n      // saved in IndexedDB.\r\n      catch (error) {\r\n        console.log('Not found in IndexedDB. Loading and saving...');\r\n        console.log(error);\r\n        this.model = await tf.loadLayersModel(MODEL_PATH);\r\n        await this.model.save('indexeddb://' + INDEXEDDB_KEY);\r\n      }\r\n    }\r\n    // If no IndexedDB, then just download like normal.\r\n    else {\r\n      console.warn('IndexedDB not supported.');\r\n      this.model = await tf.loadLayersModel(MODEL_PATH);\r\n    }\r\n\r\n    this.setState({ modelLoaded: true });\r\n    this.initWebcam();\r\n\r\n    // Warm up model.\r\n    let prediction = tf.tidy(() => this.model.predict(tf.zeros([1, IMAGE_SIZE, IMAGE_SIZE, 3])));\r\n    prediction.dispose();\r\n  }\r\n\r\n  async componentWillUnmount() {\r\n    if (this.webcam) {\r\n      this.webcam.stop();\r\n    }\r\n\r\n    // Attempt to dispose of the model.\r\n    try {\r\n      this.model.dispose();\r\n    }\r\n    catch (e) {\r\n      // Assume model is not loaded or already disposed.\r\n    }\r\n  }\r\n\r\n  initWebcam = async () => {\r\n    try {\r\n      this.webcam = await tf.data.webcam(\r\n        this.refs.webcam,\r\n        {resizeWidth: CANVAS_SIZE, resizeHeight: CANVAS_SIZE, facingMode: 'environment'}\r\n      );\r\n    }\r\n    catch (e) {\r\n      this.refs.noWebcam.style.display = 'block';\r\n    }\r\n  }\r\n\r\n  startWebcam = async () => {\r\n    if (this.webcam) {\r\n      this.webcam.start();\r\n    }\r\n  }\r\n\r\n  stopWebcam = async () => {\r\n    if (this.webcam) {\r\n      this.webcam.stop();\r\n    }\r\n  }\r\n\r\n  getModelInfo = async () => {\r\n    await fetch(`${config.API_ENDPOINT}/model_info`, {\r\n      method: 'GET',\r\n    })\r\n    .then(async (response) => {\r\n      await response.json().then((data) => {\r\n        this.modelLastUpdated = data.last_updated;\r\n      })\r\n      .catch((err) => {\r\n        console.log('Unable to get parse model info.');\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log('Unable to get model info');\r\n    });\r\n  }\r\n\r\n  updateModel = async () => {\r\n    // Get the latest model from the server and refresh the one saved in IndexedDB.\r\n    console.log('Updating the model: ' + INDEXEDDB_KEY);\r\n    this.setState({ isDownloadingModel: true });\r\n    this.model = await tf.loadLayersModel(MODEL_PATH);\r\n    await this.model.save('indexeddb://' + INDEXEDDB_KEY);\r\n    this.setState({\r\n      isDownloadingModel: false,\r\n      modelUpdateAvailable: false,\r\n      showModelUpdateAlert: false,\r\n      showModelUpdateSuccess: true\r\n    });\r\n  }\r\n\r\n  classifyLocalImage = async () => {\r\n    this.setState({ isClassifying: true });\r\n\r\n    const croppedCanvas = this.refs.cropper.getCroppedCanvas();\r\n    const image = tf.tidy( () => tf.browser.fromPixels(croppedCanvas).toFloat());\r\n\r\n    // Process and resize image before passing in to model.\r\n    const imageData = await this.processImage(image);\r\n    const resizedImage = tf.image.resizeBilinear(imageData, [IMAGE_SIZE, IMAGE_SIZE]);\r\n\r\n    const logits = this.model.predict(resizedImage);\r\n    const probabilities = await logits.data();\r\n    const preds = await this.getTopKClasses(probabilities, TOPK_PREDICTIONS);\r\n\r\n    this.setState({\r\n      predictions: preds,\r\n      isClassifying: false,\r\n      photoSettingsOpen: !this.state.photoSettingsOpen\r\n    });\r\n\r\n    // Draw thumbnail to UI.\r\n    const context = this.refs.canvas.getContext('2d');\r\n    const ratioX = CANVAS_SIZE / croppedCanvas.width;\r\n    const ratioY = CANVAS_SIZE / croppedCanvas.height;\r\n    const ratio = Math.min(ratioX, ratioY);\r\n    context.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\r\n    context.drawImage(croppedCanvas, 0, 0,\r\n                      croppedCanvas.width * ratio, croppedCanvas.height * ratio);\r\n\r\n    // Dispose of tensors we are finished with.\r\n    image.dispose();\r\n    imageData.dispose();\r\n    resizedImage.dispose();\r\n    logits.dispose();\r\n  }\r\n\r\n  classifyWebcamImage = async () => {\r\n    this.setState({ isClassifying: true });\r\n\r\n    const imageCapture = await this.webcam.capture();\r\n\r\n    const resized = tf.image.resizeBilinear(imageCapture, [IMAGE_SIZE, IMAGE_SIZE]);\r\n    const imageData = await this.processImage(resized);\r\n    const logits = this.model.predict(imageData);\r\n    const probabilities = await logits.data();\r\n    const preds = await this.getTopKClasses(probabilities, TOPK_PREDICTIONS);\r\n\r\n    this.setState({\r\n      predictions: preds,\r\n      isClassifying: false,\r\n      photoSettingsOpen: !this.state.photoSettingsOpen\r\n    });\r\n\r\n    // Draw thumbnail to UI.\r\n    const tensorData = tf.tidy(() => imageCapture.toFloat().div(255));\r\n    await tf.browser.toPixels(tensorData, this.refs.canvas);\r\n\r\n    // Dispose of tensors we are finished with.\r\n    resized.dispose();\r\n    imageCapture.dispose();\r\n    imageData.dispose();\r\n    logits.dispose();\r\n    tensorData.dispose();\r\n  }\r\n\r\n  processImage = async (image) => {\r\n    return tf.tidy(() => image.expandDims(0).toFloat().div(127).sub(1));\r\n  }\r\n\r\n  /**\r\n   * Computes the probabilities of the topK classes given logits by computing\r\n   * softmax to get probabilities and then sorting the probabilities.\r\n   * @param logits Tensor representing the logits from MobileNet.\r\n   * @param topK The number of top predictions to show.\r\n   */\r\n  getTopKClasses = async (values, topK) => {\r\n    const valuesAndIndices = [];\r\n    for (let i = 0; i < values.length; i++) {\r\n      valuesAndIndices.push({value: values[i], index: i});\r\n    }\r\n    valuesAndIndices.sort((a, b) => {\r\n      return b.value - a.value;\r\n    });\r\n    const topkValues = new Float32Array(topK);\r\n    const topkIndices = new Int32Array(topK);\r\n    for (let i = 0; i < topK; i++) {\r\n      topkValues[i] = valuesAndIndices[i].value;\r\n      topkIndices[i] = valuesAndIndices[i].index;\r\n    }\r\n\r\n    const topClassesAndProbs = [];\r\n    for (let i = 0; i < topkIndices.length; i++) {\r\n      topClassesAndProbs.push({\r\n        className: MODEL_CLASSES[topkIndices[i]],\r\n        probability: (topkValues[i] * 100).toFixed(2)\r\n      });\r\n    }\r\n    return topClassesAndProbs;\r\n  }\r\n\r\n  handlePanelClick = event => {\r\n    this.setState({ photoSettingsOpen: !this.state.photoSettingsOpen });\r\n  }\r\n\r\n  handleFileChange = event => {\r\n    if (event.target.files && event.target.files.length > 0) {\r\n      this.setState({\r\n        file: URL.createObjectURL(event.target.files[0]),\r\n        filename: event.target.files[0].name\r\n      });\r\n    }\r\n  }\r\n\r\n  handleTabSelect = activeKey => {\r\n    switch(activeKey) {\r\n      case 'camera':\r\n        this.startWebcam();\r\n        break;\r\n      case 'localfile':\r\n        this.setState({filename: null, file: null});\r\n        this.stopWebcam();\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Classify container\">\r\n\r\n      { !this.state.modelLoaded &&\r\n        <Fragment>\r\n          <Spinner animation=\"border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </Spinner>\r\n          {' '}<span className=\"loading-model-text\">Loading Model</span>\r\n        </Fragment>\r\n      }\r\n\r\n      { this.state.modelLoaded &&\r\n        <Fragment>\r\n        <Button\r\n          onClick={this.handlePanelClick}\r\n          className=\"classify-panel-header\"\r\n          aria-controls=\"photo-selection-pane\"\r\n          aria-expanded={this.state.photoSettingsOpen}\r\n          >\r\n          Take or Select a Photo to Classify\r\n            <span className='panel-arrow'>\r\n            { this.state.photoSettingsOpen\r\n              ? <FaChevronDown />\r\n              : <FaChevronRight />\r\n            }\r\n            </span>\r\n          </Button>\r\n          <Collapse in={this.state.photoSettingsOpen}>\r\n            <div id=\"photo-selection-pane\">\r\n            { this.state.modelUpdateAvailable && this.state.showModelUpdateAlert &&\r\n                <Container>\r\n                  <Alert\r\n                    variant=\"info\"\r\n                    show={this.state.modelUpdateAvailable && this.state.showModelUpdateAlert}\r\n                    onClose={() => this.setState({ showModelUpdateAlert: false})}\r\n                    dismissible>\r\n                      An update for the <strong>{this.state.modelType}</strong> model is available.\r\n                      <div className=\"d-flex justify-content-center pt-1\">\r\n                        {!this.state.isDownloadingModel &&\r\n                          <Button onClick={this.updateModel}\r\n                                  variant=\"outline-info\">\r\n                            Update\r\n                          </Button>\r\n                        }\r\n                        {this.state.isDownloadingModel &&\r\n                          <div>\r\n                            <Spinner animation=\"border\" role=\"status\" size=\"sm\">\r\n                              <span className=\"sr-only\">Downloading...</span>\r\n                            </Spinner>\r\n                            {' '}<strong>Downloading...</strong>\r\n                          </div>\r\n                        }\r\n                      </div>\r\n                  </Alert>\r\n                </Container>\r\n              }\r\n              {this.state.showModelUpdateSuccess &&\r\n                <Container>\r\n                  <Alert variant=\"success\"\r\n                         onClose={() => this.setState({ showModelUpdateSuccess: false})}\r\n                         dismissible>\r\n                    The <strong>{this.state.modelType}</strong> model has been updated!\r\n                  </Alert>\r\n                </Container>\r\n              }\r\n            <Tabs defaultActiveKey=\"camera\" id=\"input-options\" onSelect={this.handleTabSelect}\r\n                  className=\"justify-content-center\">\r\n              <Tab eventKey=\"camera\" title=\"Take Photo\">\r\n                <div id=\"no-webcam\" ref=\"noWebcam\">\r\n                  <span className=\"camera-icon\"><FaCamera /></span>\r\n                  No camera found. <br />\r\n                  Please use a device with a camera, or upload an image instead.\r\n                </div>\r\n                <div className=\"webcam-box-outer\">\r\n                  <div className=\"webcam-box-inner\">\r\n                    <video ref=\"webcam\" autoPlay playsInline muted id=\"webcam\"\r\n                           width=\"448\" height=\"448\">\r\n                    </video>\r\n                  </div>\r\n                </div>\r\n                <div className=\"button-container\">\r\n                  <LoadButton\r\n                    variant=\"primary\"\r\n                    size=\"lg\"\r\n                    onClick={this.classifyWebcamImage}\r\n                    isLoading={this.state.isClassifying}\r\n                    text=\"Classify\"\r\n                    loadingText=\"Classifying...\"\r\n                  />\r\n                </div>\r\n              </Tab>\r\n              <Tab eventKey=\"localfile\" title=\"Select Local File\">\r\n                <Form.Group controlId=\"file\">\r\n                  <Form.Label>Select Image File</Form.Label><br />\r\n                  <Form.Label className=\"imagelabel\">\r\n                    {this.state.filename ? this.state.filename : 'Browse...'}\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    onChange={this.handleFileChange}\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    className=\"imagefile\" />\r\n                </Form.Group>\r\n                { this.state.file &&\r\n                  <Fragment>\r\n                    <div id=\"local-image\">\r\n                      <Cropper\r\n                        ref=\"cropper\"\r\n                        src={this.state.file}\r\n                        style={{height: 400, width: '100%'}}\r\n                        guides={true}\r\n                        aspectRatio={1 / 1}\r\n                        viewMode={2}\r\n                      />\r\n                    </div>\r\n                    <div className=\"button-container\">\r\n                      <LoadButton\r\n                        variant=\"primary\"\r\n                        size=\"lg\"\r\n                        disabled={!this.state.filename}\r\n                        onClick={this.classifyLocalImage}\r\n                        isLoading={this.state.isClassifying}\r\n                        text=\"Classify\"\r\n                        loadingText=\"Classifying...\"\r\n                      />\r\n                    </div>\r\n                  </Fragment>\r\n                }\r\n              </Tab>\r\n            </Tabs>\r\n            </div>\r\n          </Collapse>\r\n          { this.state.predictions.length > 0 &&\r\n            <div className=\"classification-results\">\r\n              <h3>Predictions</h3>\r\n              <canvas ref=\"canvas\" width={CANVAS_SIZE} height={CANVAS_SIZE} />\r\n              <br />\r\n              <ListGroup>\r\n              {this.state.predictions.map((category) => {\r\n                  return (\r\n                    <ListGroup.Item key={category.className}>\r\n                      <strong>{category.className}</strong> {category.probability}%</ListGroup.Item>\r\n                  );\r\n              })}\r\n              </ListGroup>\r\n            </div>\r\n          }\r\n          </Fragment>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './NotFound.css';\r\n\r\n/**\r\n * This is rendered when a route is not found (404).\r\n */\r\nexport default () =>\r\n  <div className=\"NotFound\">\r\n    <h1>404</h1>\r\n    <h3>The page you were looking for is not here.</h3>\r\n    <a href=\"/\">Go Home</a>\r\n  </div>;\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport About from './pages/About';\r\nimport Classify from './pages/Classify';\r\nimport NotFound from './pages/NotFound';\r\n\r\nexport default ({ childProps }) =>\r\n  <Switch>\r\n    <Route path=\"/\" exact component={Classify} props={childProps} />\r\n    <Route path=\"/about\" exact component={About} props={childProps} />\r\n    <Route component={NotFound} />\r\n  </Switch>;\r\n","import { PropTypes } from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Container, Nav, Navbar } from 'react-bootstrap';\r\nimport AlertDismissable from './components/AlertDismissable';\r\nimport Routes from './Routes';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const reloadMsg = `\r\n      New content is available.<br />\r\n      Please <a href='javascript:location.reload();'>reload</a>.<br />\r\n      <small>If reloading doesn't work, close all tabs/windows of this web application,\r\n      and then reopen the application.</small>\r\n    `;\r\n    this.state = {\r\n      showUpdateAlert: true,\r\n      reloadMsg: reloadMsg\r\n    };\r\n  }\r\n\r\n  dismissUpdateAlert = event => {\r\n    this.setState({ showUpdateAlert: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"App\">\r\n          <Container>\r\n            <Navbar collapseOnSelect className=\"app-nav-bar\" variant=\"dark\" expand=\"lg\">\r\n              <Navbar.Brand href=\"/\">WebClassify</Navbar.Brand>\r\n              <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n              <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"\">\r\n                  <Link className=\"nav-link\" to=\"/\">Classify</Link>\r\n                  <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                </Nav>\r\n              </Navbar.Collapse>\r\n            </Navbar>\r\n            { this.props.updateAvailable && this.state.showUpdateAlert &&\r\n              <div style={{paddingTop: '10px'}}>\r\n                <AlertDismissable\r\n                  title=\"\"\r\n                  variant=\"info\"\r\n                  message={this.state.reloadMsg}\r\n                  show={this.props.updateAvailable && this.state.showUpdateAlert}\r\n                  onClose={this.dismissUpdateAlert} />\r\n              </div>\r\n            }\r\n          </Container>\r\n          <Container>\r\n            <Routes />\r\n          </Container>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  updateAvailable: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      // A new service worker has previously finished installing, and is now waiting.\r\n      if (registration.waiting && registration.active) {\r\n        newerSwAvailable(registration.waiting);\r\n      }\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              newerSwAvailable(installingWorker);\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n      function newerSwAvailable(sw){\r\n        // At this point, the updated precached content has been fetched,\r\n        // but the previous service worker will still serve the older\r\n        // content until all client tabs are closed.\r\n        console.log(\r\n          'New content is available and will be used when all ' +\r\n            'tabs for this page are closed. See http://bit.ly/CRA2-PWA.'\r\n        );\r\n        if (config && config.onUpdate) {\r\n          config.onUpdate(registration, sw);\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nclass Index extends Component {\r\n  state = {\r\n    contentCached: false,\r\n    updateAvailable: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const config = {\r\n      onUpdate: this.handleUpdate,\r\n    };\r\n\r\n    // If you want your app to work offline and load faster, you can change\r\n    // unregister() to register() below. Note this comes with some pitfalls.\r\n    // Learn more about service workers: https://bit.ly/CRA-PWA\r\n    serviceWorker.register(config);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <App updateAvailable={this.state.updateAvailable} />\r\n      </Router>\r\n    );\r\n  }\r\n\r\n  handleUpdate = (registration) => {\r\n    const waitingServiceWorker = registration.waiting;\r\n\r\n    if (waitingServiceWorker) {\r\n      waitingServiceWorker.postMessage({ type: 'SKIP_WAITING' });\r\n    }\r\n    this.setState({ updateAvailable: true});\r\n  }\r\n}\r\n\r\nReactDOM.render(<Index />, document.getElementById('root'));\r\n"],"sourceRoot":""}